#!/bin/bash

diskSel() {

  while true; do

    echo -e '\nDisks available for installation :\n'
    diskList=$(fdisk -l)
    readarray -t disks <<< $(egrep -o '^Disk /dev/[^,]+' <<< "$diskList" | grep -v '^Disk /dev/loop')
    for ((i=0; i < "${#disks[@]}"; i++)); do
      choiceList[i]=$(echo "[$i] - $(grep -b1 "${disks[i]}" <<< "$diskList" | tail -n 1 | grep -Po '(?<=: ).+' | sed 's: *$::g') - ${disks[i]:6}")
    done
    printf '%s\n' "${choiceList[@]}"
    echo
    read -p 'Option (m for more info) (default=0) : ' x
    echo
    if [ "$x" = m ]; then
     clear && fdisk -l
     continue
    elif [ "$x" = '' ]; then
      x=0
    fi
    disk="${disks[x]:6}"
    if [[ -n "$disk" && "$x" =~ [0-9]+ ]]; then
      disk="/$(egrep -o '^[^: ]+' <<< "$disk")"
      echo -e "> \e[32mSelected ${choiceList[x]:6}\e[0m\n"
      break
    else
      echo -e "> \e[31mERROR : Invalid selection\e[0m"
    fi

  done

  efi=$(fdisk -l "$disk" | tail -n 3 | grep 'EFI System' | awk '{print $1}')
  filesystem=$(fdisk -l "$disk" | tail -n 3 | grep 'Linux filesystem' | awk '{print $1}')
  umount -l -q "$efi" "$filesystem"

}

if whoami | grep -q 'u0_'; then # Termux

  # init
  clear
  echo -en '\e[33mWARNING : This script was made for fresh TERMUX installs. Otherwise, expect your system to break.\e[0m\n\nContinue ? '
  read x; [ "$x" != y ] && echo && exit
  [ ! -d ~/storage ] && termux-setup-storage
  touch ~/.hushlogin

  # update
  echo -en '\nupdate ? '; read x; [ "$x" = y ] && \
    apt update -o DPkg::Options::="--force-confnew" -y && \
    apt upgrade -o DPkg::Options::="--force-confnew" -y && \
    pkg update -o DPkg::Options::="--force-confnew" -y && \
    pkg upgrade -o DPkg::Options::="--force-confnew" -y
  mkdir -p ~/.temp ~/.temp/trash
  rm ~/storage/ -rf

  # packages
  echo -en "\ninstall packages? : "
  read x; [ "$x" = y ] && \
  apt install wget nano python3 p7zip zip \
      proot-distro git wget man htop tree \
      nodejs ffmpeg file lynx jq bc whois \
      imagemagick potrace iproute2 mediainfo \
      -o DPkg::Options::="--force-confnew" -y && \
      npm install peerflix -g

  # backup
  echo -en "\nextract backup? : "
  read x; echo "$x" | egrep -q '.{8,}' && \
    curl -# -L 'go.ly/bkp-prv' -o backup.7z && \
    apt install -y p7zip && \
    7z x backup.7z -o"$HOME" -p"$x" -y && \
    rm -rf ~/backup.7z
  [ "$x" = y ] && \
    curl -# -L 'go.ly/bkp-pub' -o backup.7z && \
    apt install -y p7zip && \
    7z x backup.7z -o"$HOME" -y && \
    rm -rf ~/backup.7z

  # java
  echo -en "\ninstall java? : "
  read x; [ "$x" = y ] && \
  curl -s 'https://raw.githubusercontent.com/MasterDevX/java/master/installjava' -o javainstall && \
  bash javainstall && \
  rm -rf javainstall ~/.profile

  # pip
  echo -en "\ninstall pip and its packages? : "
  read x; [ "$x" = y ] && \
  python3 -m pip install --upgrade pip && \
  pip install rapidfuzz==1.9.1
  pip install yt-dlp spotdl instaloader

  # vm
  echo -en "\ninstall ubuntu vm? : "
  read x; [ "$x" = y ] && \
  apt install proot-distro && \
  proot-distro install ubuntu

  # end
  wait; pkill -4 bash

elif [[ $(arch-chroot 2>&1) == '==> ERROR: No chroot directory specified' ]]; then # arch iso

  # init
  clear
  read -p $'\e[33mWARNING : This script was made for ARCH ISOs. Otherwise, expect your system to break.\nAlso, there is a high chance of breaking your system by skipping steps or setting up multiple users.\e[0m\nContinue ? (default=n) ' x

  if [ "$x" != chroot ]; then

    [ "$x" != y ] && echo -e '\nExiting...\n' && exit

    # internet check
    echo
    if ping google.com -c1 >> /root/log 2>&1; then
      echo '> Connected to the internet'
    else
      echo -e '> \e[31mERROR : Not connected to the internet. Please verify your connection and try again\e[0m\n'
      exit
    fi

    # sync date
    timedatectl set-ntp true
    while timedatectl status | grep -q 'System clock synchronized: no'; do
      [ "$tries" = 20 ] && echo 'Time clock failed to synchronize... && exit'
      ((tries++))
      sleep 0.5
    done
    echo -e '> Time clock successfully synchronized'

    # disk selection
    diskSel

    # partitionning
    read -p $'Format ALL disk and setup partitions ?\n\e[31m(WARNING: THERE IS NO COMMING BACK)\e[0m (default=n) : ' x
    [ "$x" != y ] && echo -e '\nExiting...\n' && exit
    echo

    while true; do
      read -p $'\e[35mEFI SYSTEM\e[0m partition size (default:512M) : ' efiSize
      [ "$efiSize" = e ] && echo -e '\nExiting...' && exit
      if [[ -z "$efiSize" ]]; then
        efiSize='+512M'
        break
      elif [[ "${efiSize@^^}" =~ ^[0-9]+[K|M|G|T|P]$ ]]; then
        efiSize="+${efiSize^^}"
        break
      else
        echo -e '\n> \e[31mERROR : Invalid input\e[0m\n'
      fi
    done

    while true; do
      read -p $'\e[35mSWAP\e[0m partition size (default:2G) : ' swapSize
      [ "$swapSize" = e ] && echo -e '\nExiting...' && exit
      if [[ -z "$swapSize" ]]; then
        swapSize='+2G'
        break
      elif [[ "${swapSize^^}" =~ ^[0-9]+[K|M|G|T|P]$ ]]; then
        swapSize="+${swapSize^^}"
        break
      else
        echo -e '\n> \e[31mERROR : Invalid input\e[0m\n'
      fi
    done

    while true; do
      read -p $'\e[35mROOT\e[0m partition size (default:remaining disk space) : ' rootSize
      [ "$rootSize" = e ] && echo -e '\nExiting...' && exit
      if [[ -z "$rootSize" ]]; then
        unset rootSize
        break
      elif [[ "${rootSize^^}" =~ ^[0-9]+[K|M|G|T|P]$ ]]; then
        rootSize="+${rootSize^^}"
        break
      else
        echo -e '\n> \e[31mERROR : Invalid input\e[0m\n'
      fi
    done

    swapoff -a
    dd if=/dev/zero of="$disk" bs=512 count=1 conv=notrunc >> log 2>&1
    echo -e "g\nn\n\n\n${efiSize}\nn\n\n\n${swapSize}\nn\n\n\n${rootSize}\nt\n1\n1\nt\n2\n19\nw" | fdisk "$disk" >> log 2>&1
    echo -e "\n\e[32mRESULTS :\e[0m\n"
    fdisk -l "$disk" --color=always | egrep -v -e '^Units' -e '^Sector size' -e '^I/O' -e '^Disk identifier'

    # filesystems
    efi=$(fdisk -l "$disk" | tail -n 3 | grep 'EFI System' | awk '{print $1}')
    swap=$(fdisk -l "$disk" | tail -n 3 | grep 'Linux swap' | awk '{print $1}')
    filesystem=$(fdisk -l "$disk" | tail -n 3 | grep 'Linux filesystem' | awk '{print $1}')
    read -p $'\nMake filesystems ? (default=y) '
    [ "$x" = e ] && echo -e '\nExiting...\n' && exit
    [ "$x" = n ] && echo -e '\nExiting...\n' && exit
    if [[ "$x" = s ]]; then
        echo -e '\e[31mSkipped\e[0m\n'
    else
      echo 'Please wait a few minutes...'
      mkfs.fat -F32 "$efi" >> log 2>&1
      mkfs.ext4 "$filesystem" >> log 2>&1
      mount "$filesystem" /mnt >> log 2>&1
      mkswap "$swap" >> log 2>&1
      swapon "$swap" >> log 2>&1
      echo -e 'Done\n'
    fi

    # arch-chroot
    read -p $'Install base packages ? (default=y) : ' x
    [ "$x" = e ] && echo -e '\nExiting...\n' && exit
    [ "$x" = n ] && echo -e '\nExiting...\n' && exit
    pacstrap /mnt base linux linux-firmware nano sudo grub efibootmgr dosfstools os-prober mtools networkmanager
    genfstab -U /mnt >> /mnt/etc/fstab

    # chroot
    read -p $'\nChroot in ? (default=y) : ' x
    [ "$x" = e ] && echo -e '\nExiting...\n' && exit
    [ "$x" = n ] && echo -e '\nExiting...\n' && exit
    echo

  else

    diskSel

  fi

  # chroot
  mount "$filesystem" /mnt >> log 2>&1
  mount --mkdir "$efi" /mnt/boot/EFI >> log 2>&1
  cp "$0" /mnt/root/install
  chmod +x /mnt/root/install
  arch-chroot /mnt ./root/install
  rm -f /mnt/root/install /mnt/root/.efiDisk

  # reboot
  read -p $'\nReboot ? (default=y) : ' x
  [ "$x" = e ] && echo -e '\nExiting...\n' && exit
  if [[ "$x" == y || -z "$x" ]]; then
    swapoff -a
    umount "$filesystem" "$efi" >> log 2>&1
    umount -R /mnt >> log 2>&1
    reboot
  fi
  echo 'echo Performing a clean exit...; swapoff -a; umount -R /mnt; sleep 1; reboot' > reboot
  chmod +x reboot
  echo -e "\n\e[32mScript finished!\e[0m"
  echo -e "Execute ./reboot for a clean exit\n"

elif [[ $(uname -a) =~ 'archiso' ]]; then # arch chroot

  # init
  echo -e "INFO : In chroot, you cannot CTRL+C\nTo exit, \e[31mDO NOT CTRL+Z or CTRL+D\e[0m (or it breaks)\nInstead, anwser 's' (skip) or 'e' (exit) to any question"

  # region
  while true; do
    echo
    ls /usr/share/zoneinfo/
    echo
    read -p 'Region ? (default=Europe) ' x
    [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
    [ "$x" = '' ] && x=Europe
    if [[ "$x" = s ]]; then
      echo -e "> \e[31mSkipped\e[0m"
      break
    elif [[ -d /usr/share/zoneinfo/"$x" && -n "$x" ]]; then
      echo -e "> \e[32mSelected $x\e[0m"
      break
    else
      echo -e '\n> \e[31mERROR : Invalid input\e[0m'
    fi
  done

  # city
  [ "$x" != s ] && \
  while true; do
    echo
    ls /usr/share/zoneinfo/"$x"
    echo
    read -p 'Location? (default=Paris) ' y
    [ "$y" = e ] && echo -e '\nExiting chroot...' && exit
    [ "$y" = '' ] && y=Paris
    if [[ "$y" = s ]]; then
      echo -e "> \e[31mSkipped\e[0m"
      break
    elif [[ -f /usr/share/zoneinfo/"$x"/"$y" ]]; then
      echo -e "> \e[32mSelected $y\e[0m"
      ln -sf /usr/share/zoneinfo/"$x"/"$y" /etc/localtime
      hwclock --systohc
      break
    else
      echo -e '\n> \e[31mERROR : Invalid input\e[0m'
    fi
  done

  # locale
  while true; do
    echo
    cat /etc/locale.gen | egrep -o '[a-z]+_[A-Z]{2}' | sort | uniq | column
    echo
    read -p 'Locale? (default=fr_FR) ' x
    [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
    [ "$x" = '' ] && x=fr_FR
    if [[ "$x" = s ]]; then
      echo -e "> \e[31mSkipped\e[0m\n"
      break
    elif [[ -n $(egrep "^#$x" /etc/locale.gen) && "$x" =~ [a-z]+_[A-Z]{2} ]]; then
      selected=$(grep "^#$x" /etc/locale.gen | grep UTF | head -n 1)
      if [[ -f /etc/locale.gen.bak ]]; then
        cp /etc/locale.gen.bak /etc/locale.gen
      else
        cp /etc/locale.gen /etc/locale.gen.bak
      fi
      result=$(sed "s:$selected:${selected:1}:" /etc/locale.gen)
      echo "$result" >> /etc/locale.gen
      egrep -o "^[a-z]+[A-Z]{2}" /etc/locale.gen
      locale-gen >> /root/log 2>&1
      echo -e "> \e[32mApplied $(sed 's:UTF-8 UTF-8:UTF-8:' <<< $(egrep "^[a-z]+_[A-Z]{2}" /etc/locale.gen))\e[0m\n"
      break
    else
      echo -e '\n> \e[31mERROR : Invalid input\e[0m'
    fi
  done

  # keymap
  while true; do
    readarray -t rawKeymaps <<< $(find /usr/share/kbd/keymaps -type f -printf "%f\n")
    for i in "${rawKeymaps[@]}"; do
      allKeymaps+=("${i%%.*}");
      if [[ "${allKeymaps[@]: -1}" =~ ^[a-z]{2}$ ]]; then
        filteredKeymaps+=("${i%%.*}")
      fi
    done
    printf '%s\n' "${filteredKeymaps[@]}" | sort | column
    echo
    read -p 'Keymap? (default=fr) (more options=all)' x
    [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
    [ "$x" = all ] && printf '%s\n' "${allKeymaps[@]}" | sort | column | less && continue
    [ "$x" = '' ] && x=fr
    if [[ "$x" = s ]]; then
      echo -e "> \e[31mSkipped\e[0m\n"
      break
    elif [[ -n $(printf '%s\n' "${allKeymaps[@]}" | egrep '^'"$x"'$') ]]; then
      echo "KEYMAP=$x" > /etc/vconsole.conf
      echo -e "> \e[32mPermanent keymap set as $x\e[0m\n"
      break
    else
      echo -e '> \e[31mERROR : Invalid input\e[0m\n'
    fi
  done

  # hostname
  read -p 'Hostname? (default=arch) ' host
  [ "$host" = e ] && echo -e '\nExiting chroot...' && exit
  [ "$host" = '' ] && host=arch
  if [[ "$host" = s ]]; then
    echo -e "> \e[31mSkipped\e[0m"
  else
    echo "$host" > /etc/hostname
    echo -e "> \e[32mHostname set as $host\e[0m"
  fi

  # root pass
  read -p $'\nRoot password? (default=root) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  [ "$x" = '' ] && x=root
  if [[ "$x" = s ]]; then
    echo -e "> \e[31mSkipped\e[0m"
  else
    echo "root:$x" | chpasswd
    echo -e "> \e[32mPassword for "root" user set\e[0m"
  fi

  # user
  read -p $'\nUser name? (default=user) ' user
  [ "$user" = e ] && echo -e '\nExiting chroot...' && exit
  [ "$user" = '' ] && user=user
  if [[ "$user" = s ]]; then
    echo -e "> \e[31mSkipped\e[0m"
    user=user
  else
    useradd -m "$user" >> /root/log 2>&1 && \
    usermod -aG wheel,audio,video,optical,storage "$user"
    echo -e "> \e[32mAdded user \"$user\"\e[0m"
  fi

  # user pass
  read -p $'\nUser password? (default=user) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  [ "$x" = '' ] && x=user
  if [[ "$x" = s ]]; then
    echo -e "> \e[31mSkipped\e[0m"
  else
    echo "$user:$x" | chpasswd
    echo -e "> \e[32mPassword for "$user" user set\e[0m"
  fi

  # auto login
  read -p $'\nAuto login ? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = y || -z "$x" ]]; then
    mkdir -p /etc/systemd/system/getty@tty1.service.d
    echo -e "[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -f -- \\\\\u' --noclear --autologin $(ls /home | head -n 1) - \$TERM" > /etc/systemd/system/getty@tty1.service.d/autologin.conf
    echo -e "> \e[32mAuto login on for $(ls /home | head -n 1)\e[0m"
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi

  # sudo
  read -p $'\nRequest password when user use sudo ? (default=n) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = n || -z "$x" ]]; then
    echo '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' | sudo EDITOR='tee -a' visudo >> /root/log 2>&1
    echo -e "> \e[32mSettings saved\e[0m"
  elif [[ "$x" = y ]]; then
    echo '%wheel ALL=(ALL:ALL) ALL' | sudo EDITOR='tee -a' visudo >> /root/log 2>&1
    echo -e "> \e[32mSettings saved\e[0m"
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi

  # hosts
  read -p $'\nAutoconfigure hosts file ? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = n ]]; then
    nano /etc/hosts
  elif [[ "$x" = y || -z "$x" ]]; then
    echo -e "127.0.0.1\tlocalhost" > /etc/hosts
    echo -e "::1\t\tlocalhost" >> /etc/hosts
    echo -e "127.0.1.1\t$user.localdomain\t$user" >> /etc/hosts
    echo -e "> \e[32mHosts file has been configured\e[0m\n"
  else
    echo -e "> \e[31mSkipped\e[0m\n"
  fi

  # grub
  read -p 'Config grub? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = y || -z "$x" ]]; then
    grub-install >> /root/log 2>&1
    grub-mkconfig -o /boot/grub/grub.cfg >> /root/log 2>&1
    echo -e "> \e[32mGrub was configured\e[0m"
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi

  # typical packages
  read -p $'\nUpdate and install typical packages ? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = y || -z "$x" ]]; then
    pacman -Syu git vim jq bc p7zip wget python3 man htop tree file lynx whois base-devel python-pip linux-headers firefox imagemagick potrace inkscape ffmpeg npm go mediainfo jdk-openjdk mpv
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi

  # backup
  read -p $'\nDownload and extract /home backup ? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if echo "$x" | egrep -q '.{8,}'; then
    curl -# -L 'go.ly/bkp-prv' -o backup.7z && \
    7z x backup.7z -o"/home/$(ls /home | head -n 1)" -p"$x" -y
  elif [[ "$x" = y || -z "$x" ]]; then
    curl -# -L 'go.ly/bkp-pub' -o backup.7z && \
    7z x backup.7z -o"/home/$(ls /home | head -n 1)" -y
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi
  rm -rf backup.7z

  # desktop environment
  read -p $'\nInstall AMD drivers, Xorg, and Gnome ? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = y || -z "$x" ]]; then
    pacman -Syu mesa xf86-video-amdgpu vulkan-radeon libva-mesa-driver mesa-vdpau xorg xorg-xinit gnome
    xinit="/home/$(ls /home | head -n 1)/.xinitrc"
    cat /etc/X11/xinit/xinitrc | head -n-5 > "$xinit"
    echo "gnome-session" >> "$xinit"
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi

  read -p $'\nSetup broadcom-wl-dkms driver ? (default=y) ' x
  [ "$x" = e ] && echo -e '\nExiting chroot...' && exit
  if [[ "$x" = y || -z "$x" ]]; then
    pacman -Syu broadcom-wl-dkms
    rmmod b43 b43legacy ssb bcm43xx brcm80211 brcmfmac brcmsmac bcma wl
    modprobe wl
  else
    echo -e "> \e[31mSkipped\e[0m"
  fi

  # other
  systemctl enable NetworkManager >> /root/log 2>&1

  # yay
  # git clone https://aur.archlinux.org/yay-git.git
  # cd yay-git
  # makepkg -si
  # cd ..
  # rm -rf yay-git

  # fonts
  # yay -S ttf-ms-fonts ttf-unifont

  # pip
  # pip install spotdl yt-dlp


else

  echo 'Platform not supported yet'

fi

