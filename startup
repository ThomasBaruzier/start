#!/bin/bash

if whoami | grep -q 'u0_'; then # Termux

  # init
  clear
  echo -en '\e[33mWARNING : this script was made for fresh TERMUX installs. Otherwise, expect your system to break.\e[0m\n\nContinue ? '
  read x; [ "$x" != y ] && echo && exit
  [ ! -d ~/storage ] && termux-setup-storage
  touch ~/.hushlogin

  # update
  echo -en '\nupdate ? '; read x; [ "$x" = y ] && \
    apt update -o DPkg::Options::="--force-confnew" -y && \
    apt upgrade -o DPkg::Options::="--force-confnew" -y && \
    pkg update -o DPkg::Options::="--force-confnew" -y && \
    pkg upgrade -o DPkg::Options::="--force-confnew" -y
  mkdir -p ~/.temp ~/.temp/trash
  rm ~/storage/ -rf

  # packages
  echo -en "\ninstall packages? : "
  read x; [ "$x" = y ] && \
  apt install wget nano python3 p7zip \
      proot-distro git wget man htop tree \
      nodejs ffmpeg file lynx jq bc whois \
      imagemagick potrace \
      -o DPkg::Options::="--force-confnew" -y && \
      npm install peerflix -g

  # backup
  echo -en "\nextract backup? : "
  read x; echo "$x" | egrep -q '.{8,}' && \
    curl -# -L 'go.ly/bkp-prv' -o backup.7z && \
    apt install -y p7zip && \
    7z x backup.7z -o"$HOME" -p"$x" -y && \
    rm -rf ~/backup.7z
  [ "$x" = y ] && \
    curl -# -L 'go.ly/bkp-pub' -o backup.7z && \
    apt install -y p7zip && \
    7z x backup.7z -o"$HOME" -y && \
    rm -rf ~/backup.7z

  # java
  echo -en "\ninstall java? : "
  read x; [ "$x" = y ] && \
  curl -s 'https://raw.githubusercontent.com/MasterDevX/java/master/installjava' -o javainstall && \
  bash javainstall && \
  rm -rf javainstall ~/.profile

  # pip
  echo -en "\ninstall pip and its packages? : "
  read x; [ "$x" = y ] && \
  python3 -m pip install --upgrade pip && \
  pip install yt-dlp spotdl

  # vm
  echo -en "\ninstall ubuntu vm? : "
  read x; [ "$x" = y ] && \
  apt install proot-distro && \
  proot-distro install ubuntu

  # end
  wait; pkill -4 bash

elif [[ $(arch-chroot 2>&1) == '==> ERROR: No chroot directory specified' ]]; then # arch iso
cp "$0" /mnt/root/install
arch-chroot /mnt ./root/install
exit

  # init
  clear
  echo -en '\e[33mWARNING : this script was made for ARCH ISOs. Otherwise, expect your system to break.\e[0m\nContinue ? (default=n) '
  read x; [ "$x" != y ] && echo -e '\nAbording...\n' && exit

  # internet check
  echo
  if ping google.com -c 1 > /dev/null 2>&1; then
    echo '> Connected to the internet'
  else
    echo -e '> \e[31mERROR : Not connected to the internet. Please verify your connection and try again\e[0m\n'
    exit
  fi

  # sync date
  timedatectl set-ntp true
  while timedatectl status | grep -q 'System clock synchronized: no'; do
    [ "$tries" = 20 ] && echo 'Time clock failed to synchronize... && exit'
    ((tries++))
    sleep 0.5
  done
  echo -e '> Time clock successfully synchronized\n'

  # disk selection
  while true; do
    echo -e 'Disks for installation :\n'
    diskList=$(fdisk -l)
    readarray -t disks <<< $(egrep -o '^Disk /dev/[^,]+' <<< "$diskList" | grep -v '^Disk /dev/loop')
    for ((i=0; i < "${#disks[@]}"; i++)); do
      choiceList[i]=$(echo "[$i] - $(grep -b1 "${disks[i]}" <<< "$diskList" | tail -n 1 | grep -Po '(?<=: ).+' | sed 's: *$::g') - ${disks[i]:6}")
    done
    printf '%s\n' "${choiceList[@]}"
    echo
    read -p 'Option (m for more info) (default=0) : ' x
    echo
    if [ "$x" = m ]; then
      clear && fdisk -l
      continue
    elif [ "$x" = '' ]; then
      x=0
    fi
    disk="${disks[x]:6}"
    if [[ -n "$disk" && "$x" =~ [0-9]+ ]]; then
      disk="/$(egrep -o '^[^: ]+' <<< "$disk")"
      echo -e "> \e[32mSelected ${choiceList[x]:6}\e[0m\n"
      break
    else
      echo -e "> \e[31mERROR : Invalid selection\e[0m\n"
    fi
    
  done

  # partitionning
  read -p $'Format ALL disk and setup partitions ?\n\e[31m(WARNING: THERE IS NO COMMING BACK)\e[0m (default=n) : ' x
  [ "$x" != y ] && echo -e '\nAbording...\n' && exit
  echo
  dd if=/dev/zero of="$disk" bs=512 count=1 conv=notrunc >> log 2>&1
  echo -e 'g\nn\n\n\n+550M\nn\n\n\n+2G\nn\n\n\n\nt\n1\n1\nt\n2\n19\nw' | fdisk "$disk" >> log 2>&1
  fdisk -l "$disk" --color=always | egrep -v -e '^Units' -e '^Sector size' -e '^I/O' -e '^Disk identifier'
  [ "$x" != y ] && echo -e '\nAbording...\n' && exit

  # filesystems
  efi=$(fdisk -l "$disk" | tail -n 3 | grep 'EFI System' | awk '{print $1}')
  swap=$(fdisk -l "$disk" | tail -n 3 | grep 'Linux swap' | awk '{print $1}')
  filesystem=$(fdisk -l "$disk" | tail -n 3 | grep 'Linux filesystem' | awk '{print $1}')
  read -p $'\nMake filesystems ? (default=y) '
  [ "$x" = n ] && echo -e '\nAbording...\n' && exit
  echo 'Please wait a few minutes...'
  mkfs.fat -F32 "$efi" >> log 2>&1
  mkswap "$swap" >> log 2>&1
  swapon "$swap" >> log 2>&1
  mkfs.ext4 "$filesystem" >> log 2>&1
  mount "$filesystem" /mnt
  echo -e 'Done\n'

  # arch-chroot
  read -p $'Pacstrap and chroot ? (default=y) : ' x
  [ "$x" = n ] && echo -e '\nAbording...\n' && exit
  pacstrap /mnt base linux-firmware
  genfstab -U /mnt >> /mnt/etc/fstab
  cp "$0" /mnt/root/install
  arch-chroot /mnt ./root/install

elif [[ $(uname -a) =~ 'archiso' ]]; then # arch chroot

  echo -e "\nINFO : In chroot, you cannot CTRL+C. To exit, do CTRL+Z\n"
  read -p 'Setup chroot environnement? ' x
  [ "$x" = n ] && echo -e '\nAbording...\n' && exit
  while true; do
    echo
    ls /usr/share/zoneinfo/
    read -p 'Continent? ' x
    [ "$x" = e ] && echo -e '\nAbording...\n' && exit
    if [[ "$(find /usr/share/zoneinfo)" =~ "$x" && -n "$x" ]]; then
      echo -e "> \e[32mSelected $x\e[0m\n"
      break
    else
      echo -e '> \e[31mERROR : Invalid input\e[0m\n'  
    fi
  done
  while true; do
    echo
    ls /usr/share/zoneinfo/"$x"
    read -p 'Location? ' y
    [ "$y" = e ] && echo -e '\nAbording...\n' && exit
    if [[ "$(find /usr/share/zoneinfo/$x)" =~ "$y" && -n "$y" ]]; then
      echo -e "> \e[32mSelected $y\e[0m\n"
      break
    else
      echo -e '> \e[31mERROR : Invalid input\e[0m\n'  
    fi
  done
  if [[ -f /usr/share/zoneinfo/"$x"/"$y" ]]; then
    echo ln -sf /usr/share/zoneinfo/"$x"/"$y" /etc/localtime
  else
    echo -e "> \e[31mERROR : Region wasn't set\e[0m\n"
    exit
  fi
  
else

  echo 'Platform not supported yet'

fi
